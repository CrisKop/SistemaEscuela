/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package GUI.Administrador;

import Clases.Curso;
import Clases.Escuela;
import Clases.Profesor;
import Clases.Usuario;
import static GUI.Administrador.PrincipalAdministrador.cargarTabla;
import Managers.ProfesorManager;
import Managers.UsuarioManager;
import java.lang.reflect.Field;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author SENA 22
 */
public class AsignarProfesoresACurso extends javax.swing.JFrame {

    /**
     * Creates new form AsignarProfesoresACurso
     */
    Curso curso;
    
    public AsignarProfesoresACurso(Curso curso) {
        initComponents();
        this.curso = curso;
        cargarModeloTablas();
        cargarTablasNecesarias();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        AllContainer = new javax.swing.JPanel();
        cursoTitle = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        jLabel7 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tableCursoProfesores = new javax.swing.JTable();
        jLabel8 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tableProfesoresDisponibles = new javax.swing.JTable();
        jLabel9 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        btnApplyAsignacion = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(700, 500));
        setResizable(false);
        setSize(new java.awt.Dimension(700, 500));
        getContentPane().setLayout(new javax.swing.BoxLayout(getContentPane(), javax.swing.BoxLayout.LINE_AXIS));

        AllContainer.setBackground(new java.awt.Color(251, 251, 254));
        AllContainer.setMinimumSize(new java.awt.Dimension(700, 500));
        AllContainer.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        cursoTitle.setFont(new java.awt.Font("SansSerif", 1, 20)); // NOI18N
        cursoTitle.setText("!");
        AllContainer.add(cursoTitle, new org.netbeans.lib.awtextra.AbsoluteConstraints(340, 30, -1, -1));

        jSeparator1.setForeground(new java.awt.Color(62, 255, 59));
        AllContainer.add(jSeparator1, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 60, 500, 10));

        jLabel7.setFont(new java.awt.Font("SansSerif", 0, 20)); // NOI18N
        jLabel7.setText("Profesores pertenecientes al curso");
        AllContainer.add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 90, -1, -1));

        tableCursoProfesores.setFont(new java.awt.Font("SansSerif", 0, 15)); // NOI18N
        tableCursoProfesores.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        tableCursoProfesores.setRowHeight(40);
        tableCursoProfesores.setSelectionBackground(new java.awt.Color(0, 204, 51));
        tableCursoProfesores.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tableCursoProfesoresMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tableCursoProfesores);

        AllContainer.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 130, 630, 120));

        jLabel8.setFont(new java.awt.Font("SansSerif", 1, 20)); // NOI18N
        jLabel8.setText("Gestion de profesores del curso");
        AllContainer.add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 30, -1, -1));

        tableProfesoresDisponibles.setFont(new java.awt.Font("SansSerif", 0, 15)); // NOI18N
        tableProfesoresDisponibles.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        tableProfesoresDisponibles.setRowHeight(40);
        tableProfesoresDisponibles.setSelectionBackground(new java.awt.Color(0, 204, 51));
        tableProfesoresDisponibles.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tableProfesoresDisponiblesMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(tableProfesoresDisponibles);

        AllContainer.add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 310, 630, 120));

        jLabel9.setFont(new java.awt.Font("SansSerif", 0, 20)); // NOI18N
        jLabel9.setText("Profesores disponibles para asignar");
        AllContainer.add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 270, -1, -1));

        jLabel18.setFont(new java.awt.Font("SansSerif", 0, 20)); // NOI18N
        jLabel18.setForeground(new java.awt.Color(174, 197, 177));
        jLabel18.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel18.setText("Click en uno para poder asignar");
        AllContainer.add(jLabel18, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 270, -1, -1));

        btnApplyAsignacion.setBackground(new java.awt.Color(242, 242, 242));
        btnApplyAsignacion.setFont(new java.awt.Font("SansSerif", 0, 20)); // NOI18N
        btnApplyAsignacion.setForeground(new java.awt.Color(255, 255, 255));
        btnApplyAsignacion.setText("Asignar al Curso");
        btnApplyAsignacion.setBorder(null);
        btnApplyAsignacion.setEnabled(false);
        btnApplyAsignacion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnApplyAsignacionActionPerformed(evt);
            }
        });
        AllContainer.add(btnApplyAsignacion, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 450, 630, 60));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 20, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 10, Short.MAX_VALUE)
        );

        AllContainer.add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(680, 540, 20, 10));

        getContentPane().add(AllContainer);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void tableCursoProfesoresMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableCursoProfesoresMouseClicked
       /*
        JTable tabla = tableCursoProfesores;
        int fila = tabla.getSelectedRow();
        if (fila != -1) {

            JButton[] buttonsEscuela = {btnApplyAsignacion, btnCreateEscuela, btnDeleteEscuela};
            habilitarBotones(buttonsEscuela);

            Object nombre = tabla.getValueAt(fila, 1);

            inputEscuelaNombre.setText(nombre.toString());
       
        }
        */
    }//GEN-LAST:event_tableCursoProfesoresMouseClicked

    private void tableProfesoresDisponiblesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableProfesoresDisponiblesMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_tableProfesoresDisponiblesMouseClicked

    private void btnApplyAsignacionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnApplyAsignacionActionPerformed
       
    }//GEN-LAST:event_btnApplyAsignacionActionPerformed

    
    ProfesorManager profesorManager = new ProfesorManager();
    UsuarioManager usuarioManager = new UsuarioManager();
    
               /*
    =====================================================================
    =====================================================================
     GESTION DE TABLAS
    */
    
    //<editor-fold>
    
      private void cargarModeloTablas(){
          
           String[] columnasProfesor = {"ID de Usuario", "Identificacion", "Nombres", "Apellidos", "Email", "Tel√©fono", "Rol", "Estado", "Departamento", "Especialidad"};
        
           Crear_Modelo(columnasProfesor, tableProfesoresDisponibles);
           Crear_Modelo(columnasProfesor, tableCursoProfesores);
        
             
    }
    
      private void cargarTablasNecesarias(){
        cargarTablaProfesoresFiltradaPorDepartamento(curso.getIdDepartamento());
  
    }
    
    private void cargarTablaProfesoresFiltradaPorDepartamento(int idDepartamento){
           List<Profesor> listaEscuelas = profesorManager.listarProfesorPorDepartamento(idDepartamento);
        
        if(listaEscuelas != null) {
            cargarTablaConDetallesDeUsuario(tableProfesoresDisponibles, listaEscuelas);
        }
    }
    
    
       public static void cargarTabla(JTable tabla, List<?> lista) {
        DefaultTableModel modelo = (DefaultTableModel) tabla.getModel();
        modelo.setRowCount(0);  // Limpiar tabla

        if (lista == null || lista.isEmpty()) {
            return;
        }

        Object ejemplo = lista.get(0);
        Field[] campos = ejemplo.getClass().getDeclaredFields();

        for (Object obj : lista) {
            Object[] fila = new Object[campos.length];
            try {
                for (int i = 0; i < campos.length; i++) {
                    campos[i].setAccessible(true);
                    fila[i] = campos[i].get(obj);
                }
                modelo.addRow(fila);
            } catch (IllegalAccessException e) {
                e.printStackTrace();
            }
        }
    }
       
       //M√©todo para cargar los datos de Usuario + Rol en una tabla, en base en la lista de el rol.
  public void cargarTablaConDetallesDeUsuario(JTable tabla, List<?> lista){
    DefaultTableModel modelo = (DefaultTableModel) tabla.getModel();
    modelo.setRowCount(0);  // Limpiar tabla

    List<Usuario> listaUsuariosEnBaseTabla = usuarioManager.listarUsuariosEnBaseAOtraLista(lista);

    if (lista == null || lista.isEmpty() || listaUsuariosEnBaseTabla == null || listaUsuariosEnBaseTabla.isEmpty()) {
        return;
    }

    Usuario ejemploUsuario = listaUsuariosEnBaseTabla.get(0);
      System.out.println(ejemploUsuario.getIdentificacion());
    Field[] camposClaseUsuario = ejemploUsuario.getClass().getDeclaredFields();

    Object ejemploRolClase = lista.get(0);
    Field[] camposRolClase = ejemploRolClase.getClass().getDeclaredFields();

    for (int i = 0; i < lista.size(); i++) {
        Object rolObj = lista.get(i);
        Usuario usuarioObj = listaUsuariosEnBaseTabla.get(i);
        
  

        Object[] fila = new Object[camposClaseUsuario.length + camposRolClase.length - 2];

        try {
         int columna = 0; // √çndice real de columna en la fila

            for (Field campo : camposClaseUsuario) {
                campo.setAccessible(true);
                String nombreCampo = campo.getName();

                if (nombreCampo.equals("password")) {
                    continue; // Saltar campo contrase√±a
                }

                Object valor = campo.get(usuarioObj);

                if (nombreCampo.equals("estado")) {
                    fila[columna] = ((int) valor == 1) ? "Activo" : "Inactivo";
                } else {
                    fila[columna] = valor;
                }

                System.out.println("Campo: " + nombreCampo + " = " + valor);
                columna++; // Solo incrementar si no se salta
            }


            // Campos del Rol/relacionado (ignorando idUsuario y id)
           columna = camposClaseUsuario.length - 1;
            int j = 0;
            for (Field campo : camposRolClase) {
                    if (j < 2) { // Saltar los primeros dos campos (idUsuario y id)
                        j++;
                        continue;
                    }

                campo.setAccessible(true);
                fila[columna] = campo.get(rolObj);
                System.out.println("Campo: " + campo.getName() + " = " + campo.get(rolObj) + " Columna: " + columna);
                columna++;
                j++;
            }

            

            modelo.addRow(fila);
        } catch (IllegalAccessException e) {
            e.printStackTrace();
        }
    }
}
       
         DefaultTableModel modelo;
 private void Crear_Modelo(String[] titulos, JTable tablaDestino) {
    try {
        DefaultTableModel modelo = new DefaultTableModel(null, titulos) {

            // Tipos de datos por columna (aqu√≠ todos String, puedes modificarlo)
            Class[] types = new Class[titulos.length];
            {
                for (int i = 0; i < types.length; i++) {
                    types[i] = String.class;
                }
            }

            // Todas las celdas no editables
            boolean[] canEdit = new boolean[titulos.length];
            {
                for (int i = 0; i < canEdit.length; i++) {
                    canEdit[i] = false;
                }
            }

            @Override
            public Class<?> getColumnClass(int columnIndex) {
                return types[columnIndex];
            }

            @Override
            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit[columnIndex];
            }
        };

        tablaDestino.setModel(modelo);

    } catch (Exception e) {
        JOptionPane.showMessageDialog(null, e.toString() + " - Error al crear modelo de tabla");
    }
}
 
      //</editor-fold>
    
       /*
      GESTI√ìN DE TABLAS
    =====================================================================
    =====================================================================
    */
    
    
    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AsignarProfesoresACurso.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AsignarProfesoresACurso.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AsignarProfesoresACurso.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AsignarProfesoresACurso.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AsignarProfesoresACurso(null).setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel AllContainer;
    private javax.swing.JButton btnApplyAsignacion;
    private javax.swing.JLabel cursoTitle;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTable tableCursoProfesores;
    private javax.swing.JTable tableProfesoresDisponibles;
    // End of variables declaration//GEN-END:variables
}
