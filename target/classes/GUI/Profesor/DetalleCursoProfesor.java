/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package GUI.Profesor;

import Clases.Calificacion;
import Clases.Curso;
import Clases.Escuela;
import Clases.Evaluacion;
import Clases.Profesor;
import Clases.Usuario;
import GUI.Calendar;
import GUI.Login;
import Managers.CalificacionManager;
import Managers.EvaluacionManager;
import com.toedter.calendar.JCalendar;
import java.awt.Color;
import java.lang.reflect.Field;
import java.sql.Timestamp;
import java.text.SimpleDateFormat;
import java.util.List;
import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import middlewares.CurrentSession;



/**
 *
 * @author criskop
 */
public class DetalleCursoProfesor extends javax.swing.JFrame {

    /**
     * Creates new form Principal
     */
    Curso currentCurso;
    
      CurrentSession currentSession = CurrentSession.getInstance();
    Usuario currentUser = currentSession.getCurrentSessionData();
    Profesor currentRole = (Profesor) currentSession.getCurrentRoleData();
   
    public DetalleCursoProfesor(Curso curso) {
        this.currentCurso = curso;
        initComponents();
        welcomeMessageName.setText(curso.getNombre());
        cargarModeloTablas();
        cargarTablasNecesarias();
        ApplyFieldsOnlyFloat();

        
    
    }
    
    private void cambiarTab(int index){
        try{
            TabbedContainer.setSelectedIndex(index);
        } catch(Exception e){
            System.out.println("Error al cambiar de tab (probablemente index no encontrado)");
            System.out.println(e.getMessage());
        }
    }
    
    private void logout(){
          // Limpia sesi√≥n antes que nada
    currentSession.logOut();

    // Cierra esta ventana
    this.dispose();

     Login login = new Login();
  
     login.setVisible(true);
  
       
      
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        RightContainer = new javax.swing.JPanel();
        TabbedContainer = new javax.swing.JTabbedPane();
        Tab1Container = new javax.swing.JPanel();
        welcomeMessageName = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tableCursoEvals = new javax.swing.JTable();
        BtnCalificacionEliminar = new javax.swing.JButton();
        jSeparator2 = new javax.swing.JSeparator();
        jLabel7 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tableCalificaciones = new javax.swing.JTable();
        BtnVerDetallesEval1 = new javax.swing.JButton();
        inputCalificacionAsignarNota = new javax.swing.JTextField();
        statusTextCalificacion = new javax.swing.JLabel();
        btnCalificacionAsignarNota = new javax.swing.JButton();
        EvaluacionManager = new javax.swing.JPanel();
        jSeparator5 = new javax.swing.JSeparator();
        inputEvaluacionTitulo = new javax.swing.JTextField();
        jLabel23 = new javax.swing.JLabel();
        jLabel24 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        tableEvaluaciones = new javax.swing.JTable();
        jLabel18 = new javax.swing.JLabel();
        counterEvaluaciones = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        btnApplyEvaluacion = new javax.swing.JButton();
        btnCreateEvaluacion = new javax.swing.JButton();
        btnDeleteEvaluacion = new javax.swing.JButton();
        statusTextEvaluacion = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jLabel25 = new javax.swing.JLabel();
        inputEvaluacionFechaInicio = new javax.swing.JTextField();
        jButton2 = new javax.swing.JButton();
        inputEvaluacionFechaFin = new javax.swing.JTextField();
        jLabel26 = new javax.swing.JLabel();
        jButton3 = new javax.swing.JButton();
        inputEvaluacionTipo = new javax.swing.JTextField();
        jLabel27 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(970, 700));
        setResizable(false);
        getContentPane().setLayout(new javax.swing.BoxLayout(getContentPane(), javax.swing.BoxLayout.LINE_AXIS));

        RightContainer.setBackground(new java.awt.Color(251, 251, 254));
        RightContainer.setMinimumSize(new java.awt.Dimension(970, 700));
        RightContainer.setPreferredSize(new java.awt.Dimension(970, 700));
        RightContainer.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        Tab1Container.setBackground(new java.awt.Color(251, 251, 254));
        Tab1Container.setMinimumSize(new java.awt.Dimension(970, 700));
        Tab1Container.setPreferredSize(new java.awt.Dimension(970, 700));
        Tab1Container.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        welcomeMessageName.setFont(new java.awt.Font("SansSerif", 1, 32)); // NOI18N
        welcomeMessageName.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        welcomeMessageName.setText("!");
        Tab1Container.add(welcomeMessageName, new org.netbeans.lib.awtextra.AbsoluteConstraints(320, 30, 320, -1));

        jSeparator1.setForeground(new java.awt.Color(62, 255, 59));
        Tab1Container.add(jSeparator1, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 70, 360, 10));

        jLabel4.setFont(new java.awt.Font("SansSerif", 0, 24)); // NOI18N
        jLabel4.setText("Evaluaciones del Curso");
        Tab1Container.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 90, -1, -1));

        jLabel5.setFont(new java.awt.Font("SansSerif", 1, 32)); // NOI18N
        jLabel5.setText("Detalles del curso");
        Tab1Container.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 30, -1, -1));

        tableCursoEvals.setFont(new java.awt.Font("SansSerif", 0, 15)); // NOI18N
        tableCursoEvals.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        tableCursoEvals.setFocusable(false);
        tableCursoEvals.setRowHeight(40);
        tableCursoEvals.setSelectionBackground(new java.awt.Color(0, 204, 51));
        jScrollPane1.setViewportView(tableCursoEvals);

        Tab1Container.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 140, 890, 170));

        BtnCalificacionEliminar.setBackground(new java.awt.Color(242, 242, 242));
        BtnCalificacionEliminar.setFont(new java.awt.Font("SansSerif", 0, 20)); // NOI18N
        BtnCalificacionEliminar.setForeground(new java.awt.Color(255, 255, 255));
        BtnCalificacionEliminar.setText("Eliminar");
        BtnCalificacionEliminar.setBorder(null);
        BtnCalificacionEliminar.setEnabled(false);
        BtnCalificacionEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnCalificacionEliminarActionPerformed(evt);
            }
        });
        Tab1Container.add(BtnCalificacionEliminar, new org.netbeans.lib.awtextra.AbsoluteConstraints(700, 600, 210, 60));
        Tab1Container.add(jSeparator2, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 420, 890, 10));

        jLabel7.setFont(new java.awt.Font("SansSerif", 0, 24)); // NOI18N
        jLabel7.setText("Ultimas evaluaciones enviadas en el curso");
        Tab1Container.add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 440, -1, -1));

        tableCalificaciones.setFont(new java.awt.Font("SansSerif", 0, 15)); // NOI18N
        tableCalificaciones.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        tableCalificaciones.setRowHeight(40);
        tableCalificaciones.setSelectionBackground(new java.awt.Color(0, 204, 51));
        tableCalificaciones.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tableCalificacionesMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(tableCalificaciones);

        Tab1Container.add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 490, 640, 160));

        BtnVerDetallesEval1.setBackground(new java.awt.Color(4, 205, 4));
        BtnVerDetallesEval1.setFont(new java.awt.Font("SansSerif", 0, 20)); // NOI18N
        BtnVerDetallesEval1.setForeground(new java.awt.Color(255, 255, 255));
        BtnVerDetallesEval1.setText("Gestionar Evaluaciones");
        BtnVerDetallesEval1.setBorder(null);
        BtnVerDetallesEval1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnVerDetallesEval1ActionPerformed(evt);
            }
        });
        Tab1Container.add(BtnVerDetallesEval1, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 330, 890, 60));

        inputCalificacionAsignarNota.setFont(new java.awt.Font("SansSerif", 0, 20)); // NOI18N
        inputCalificacionAsignarNota.setEnabled(false);
        Tab1Container.add(inputCalificacionAsignarNota, new org.netbeans.lib.awtextra.AbsoluteConstraints(700, 480, 210, 40));

        statusTextCalificacion.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        statusTextCalificacion.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        Tab1Container.add(statusTextCalificacion, new org.netbeans.lib.awtextra.AbsoluteConstraints(690, 670, 230, 15));

        btnCalificacionAsignarNota.setBackground(new java.awt.Color(242, 242, 242));
        btnCalificacionAsignarNota.setFont(new java.awt.Font("SansSerif", 0, 20)); // NOI18N
        btnCalificacionAsignarNota.setForeground(new java.awt.Color(255, 255, 255));
        btnCalificacionAsignarNota.setText("Asignar nota");
        btnCalificacionAsignarNota.setBorder(null);
        btnCalificacionAsignarNota.setEnabled(false);
        btnCalificacionAsignarNota.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCalificacionAsignarNotaActionPerformed(evt);
            }
        });
        Tab1Container.add(btnCalificacionAsignarNota, new org.netbeans.lib.awtextra.AbsoluteConstraints(700, 530, 210, 60));

        TabbedContainer.addTab("Principal", Tab1Container);

        EvaluacionManager.setBackground(new java.awt.Color(251, 251, 254));
        EvaluacionManager.setMinimumSize(new java.awt.Dimension(970, 700));
        EvaluacionManager.setPreferredSize(new java.awt.Dimension(970, 700));
        EvaluacionManager.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jSeparator5.setForeground(new java.awt.Color(62, 255, 59));
        EvaluacionManager.add(jSeparator5, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 80, 360, 10));

        inputEvaluacionTitulo.setFont(new java.awt.Font("SansSerif", 0, 20)); // NOI18N
        EvaluacionManager.add(inputEvaluacionTitulo, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 390, 285, 40));

        jLabel23.setFont(new java.awt.Font("SansSerif", 0, 20)); // NOI18N
        jLabel23.setText("Titulo *");
        EvaluacionManager.add(jLabel23, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 360, -1, -1));

        jLabel24.setFont(new java.awt.Font("SansSerif", 1, 32)); // NOI18N
        jLabel24.setText("Gestion de evaluaciones");
        EvaluacionManager.add(jLabel24, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 40, -1, -1));

        tableEvaluaciones.setFont(new java.awt.Font("SansSerif", 0, 15)); // NOI18N
        tableEvaluaciones.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        tableEvaluaciones.setRowHeight(40);
        tableEvaluaciones.setSelectionBackground(new java.awt.Color(0, 204, 51));
        tableEvaluaciones.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tableEvaluacionesMouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(tableEvaluaciones);

        EvaluacionManager.add(jScrollPane3, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 170, 890, 170));

        jLabel18.setFont(new java.awt.Font("SansSerif", 0, 24)); // NOI18N
        jLabel18.setForeground(new java.awt.Color(174, 197, 177));
        jLabel18.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel18.setText("Click en una para editar");
        EvaluacionManager.add(jLabel18, new org.netbeans.lib.awtextra.AbsoluteConstraints(660, 110, -1, -1));

        counterEvaluaciones.setFont(new java.awt.Font("SansSerif", 0, 24)); // NOI18N
        counterEvaluaciones.setText("0");
        EvaluacionManager.add(counterEvaluaciones, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 110, 150, -1));

        jLabel19.setFont(new java.awt.Font("SansSerif", 0, 24)); // NOI18N
        jLabel19.setText("Lista de evaluaciones:");
        EvaluacionManager.add(jLabel19, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 110, -1, -1));

        btnApplyEvaluacion.setBackground(new java.awt.Color(242, 242, 242));
        btnApplyEvaluacion.setFont(new java.awt.Font("SansSerif", 0, 20)); // NOI18N
        btnApplyEvaluacion.setForeground(new java.awt.Color(255, 255, 255));
        btnApplyEvaluacion.setText("Aplicar");
        btnApplyEvaluacion.setBorder(null);
        btnApplyEvaluacion.setEnabled(false);
        btnApplyEvaluacion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnApplyEvaluacionActionPerformed(evt);
            }
        });
        EvaluacionManager.add(btnApplyEvaluacion, new org.netbeans.lib.awtextra.AbsoluteConstraints(830, 590, 90, 60));

        btnCreateEvaluacion.setBackground(new java.awt.Color(4, 205, 4));
        btnCreateEvaluacion.setFont(new java.awt.Font("SansSerif", 0, 20)); // NOI18N
        btnCreateEvaluacion.setForeground(new java.awt.Color(255, 255, 255));
        btnCreateEvaluacion.setText("Crear nuevo");
        btnCreateEvaluacion.setBorder(null);
        btnCreateEvaluacion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCreateEvaluacionActionPerformed(evt);
            }
        });
        EvaluacionManager.add(btnCreateEvaluacion, new org.netbeans.lib.awtextra.AbsoluteConstraints(680, 590, 130, 60));

        btnDeleteEvaluacion.setBackground(new java.awt.Color(242, 242, 242));
        btnDeleteEvaluacion.setFont(new java.awt.Font("SansSerif", 0, 20)); // NOI18N
        btnDeleteEvaluacion.setForeground(new java.awt.Color(255, 255, 255));
        btnDeleteEvaluacion.setText("Eliminar");
        btnDeleteEvaluacion.setBorder(null);
        btnDeleteEvaluacion.setEnabled(false);
        btnDeleteEvaluacion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteEvaluacionActionPerformed(evt);
            }
        });
        EvaluacionManager.add(btnDeleteEvaluacion, new org.netbeans.lib.awtextra.AbsoluteConstraints(570, 590, 90, 60));

        statusTextEvaluacion.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        statusTextEvaluacion.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        EvaluacionManager.add(statusTextEvaluacion, new org.netbeans.lib.awtextra.AbsoluteConstraints(580, 560, 340, 15));

        jButton1.setBackground(new java.awt.Color(251, 251, 254));
        jButton1.setFont(new java.awt.Font("SansSerif", 0, 40)); // NOI18N
        jButton1.setText("<");
        jButton1.setBorder(null);
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        EvaluacionManager.add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 35, -1, -1));

        jLabel25.setFont(new java.awt.Font("SansSerif", 0, 20)); // NOI18N
        jLabel25.setText("Fecha de Inicio *");
        EvaluacionManager.add(jLabel25, new org.netbeans.lib.awtextra.AbsoluteConstraints(335, 360, -1, -1));

        inputEvaluacionFechaInicio.setFont(new java.awt.Font("SansSerif", 0, 20)); // NOI18N
        inputEvaluacionFechaInicio.setEnabled(false);
        EvaluacionManager.add(inputEvaluacionFechaInicio, new org.netbeans.lib.awtextra.AbsoluteConstraints(335, 390, 285, 40));

        jButton2.setBackground(new java.awt.Color(4, 205, 4));
        jButton2.setFont(new java.awt.Font("SansSerif", 0, 14)); // NOI18N
        jButton2.setForeground(new java.awt.Color(255, 255, 255));
        jButton2.setText("Asignar Fecha");
        jButton2.setBorderPainted(false);
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        EvaluacionManager.add(jButton2, new org.netbeans.lib.awtextra.AbsoluteConstraints(335, 440, 285, 30));

        inputEvaluacionFechaFin.setFont(new java.awt.Font("SansSerif", 0, 20)); // NOI18N
        inputEvaluacionFechaFin.setEnabled(false);
        EvaluacionManager.add(inputEvaluacionFechaFin, new org.netbeans.lib.awtextra.AbsoluteConstraints(640, 390, 285, 40));

        jLabel26.setFont(new java.awt.Font("SansSerif", 0, 20)); // NOI18N
        jLabel26.setText("Fecha de Entrega *");
        EvaluacionManager.add(jLabel26, new org.netbeans.lib.awtextra.AbsoluteConstraints(640, 360, -1, -1));

        jButton3.setBackground(new java.awt.Color(4, 205, 4));
        jButton3.setFont(new java.awt.Font("SansSerif", 0, 14)); // NOI18N
        jButton3.setForeground(new java.awt.Color(255, 255, 255));
        jButton3.setText("Asignar Fecha");
        jButton3.setBorderPainted(false);
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        EvaluacionManager.add(jButton3, new org.netbeans.lib.awtextra.AbsoluteConstraints(640, 440, 285, 30));

        inputEvaluacionTipo.setFont(new java.awt.Font("SansSerif", 0, 20)); // NOI18N
        EvaluacionManager.add(inputEvaluacionTipo, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 490, 285, 40));

        jLabel27.setFont(new java.awt.Font("SansSerif", 0, 20)); // NOI18N
        jLabel27.setText("Tipo *");
        EvaluacionManager.add(jLabel27, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 460, -1, -1));

        TabbedContainer.addTab("Escuelas", EvaluacionManager);

        RightContainer.add(TabbedContainer, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, -40, 970, 790));

        getContentPane().add(RightContainer);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void BtnCalificacionEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnCalificacionEliminarActionPerformed
        deleteCalificacion();
    }//GEN-LAST:event_BtnCalificacionEliminarActionPerformed

    private void BtnVerDetallesEval1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnVerDetallesEval1ActionPerformed
        cambiarTab(1);
    }//GEN-LAST:event_BtnVerDetallesEval1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        String fechaSeleccionada = inputEvaluacionFechaInicio.getText();        
        Calendar dialog = new Calendar(this, true, fechaSeleccionada);
        dialog.setLocationRelativeTo(this);
        dialog.setVisible(true);
        
        String fecha = dialog.getFechaSeleccionada();
        
        asignarFechaAInput(inputEvaluacionFechaInicio, fecha);
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        String fechaSeleccionada = inputEvaluacionFechaFin.getText();        
        Calendar dialog = new Calendar(this, true, fechaSeleccionada);
        dialog.setLocationRelativeTo(this);
        dialog.setVisible(true);
        
        String fecha = dialog.getFechaSeleccionada();
        
        asignarFechaAInput(inputEvaluacionFechaFin, fecha);
    }//GEN-LAST:event_jButton3ActionPerformed

    private void tableEvaluacionesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableEvaluacionesMouseClicked
       JTable tabla = tableEvaluaciones;
        int fila = tabla.getSelectedRow();
        if (fila != -1) {
        
        JButton[] buttons = {btnApplyEvaluacion, btnCreateEvaluacion, btnDeleteEvaluacion};
        habilitarBotones(buttons);

            Object titulo = tabla.getValueAt(fila, 3);
            Object fechaInicio = tabla.getValueAt(fila, 4);
              Object fechaFin = tabla.getValueAt(fila, 5);
                 Object tipo = tabla.getValueAt(fila, 6);

        inputEvaluacionTitulo.setText(titulo.toString());
        inputEvaluacionFechaInicio.setText(fechaInicio.toString());
        inputEvaluacionFechaFin.setText(fechaFin.toString());
        inputEvaluacionTipo.setText(tipo.toString());
    }
    }//GEN-LAST:event_tableEvaluacionesMouseClicked

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        cambiarTab(0);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void btnApplyEvaluacionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnApplyEvaluacionActionPerformed
       updateEvaluacion();
    }//GEN-LAST:event_btnApplyEvaluacionActionPerformed

    private void btnCreateEvaluacionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCreateEvaluacionActionPerformed
       createNewEvaluacion();
    }//GEN-LAST:event_btnCreateEvaluacionActionPerformed

    private void btnDeleteEvaluacionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteEvaluacionActionPerformed
        deleteEvaluacion();
    }//GEN-LAST:event_btnDeleteEvaluacionActionPerformed

    private void tableCalificacionesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableCalificacionesMouseClicked
       JTable tabla = tableCalificaciones;
        int fila = tabla.getSelectedRow();
        if (fila != -1) {
        
        JButton[] buttons = {btnCalificacionAsignarNota, BtnCalificacionEliminar};
        inputCalificacionAsignarNota.setEnabled(true);
        habilitarBotones(buttons);

                 Object nota = tabla.getValueAt(fila, 4);

   
        inputEvaluacionTipo.setText(nota.toString());
    }
    }//GEN-LAST:event_tableCalificacionesMouseClicked

    private void btnCalificacionAsignarNotaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCalificacionAsignarNotaActionPerformed
         updateCalificacionNota();
    }//GEN-LAST:event_btnCalificacionAsignarNotaActionPerformed

    
             /*
    =====================================================================
    =====================================================================
     M√âTODOS UTILES
    */
    
    //<editor-fold>
    
   private void asignarFechaAInput(JTextField input, String fecha){
       input.setText(fecha);
   }
   
   
   
   private void desabilitarBotones(JButton[] botones){
        
         for(JButton btn : botones){
             
               if(!btn.getText().equals("Crear nuevo")){
            btn.setBackground(new Color(242,242,242));
            btn.setEnabled(false);
               }
        }
         
    }
    
    private void habilitarBotones(JButton[] botones){
        
        for(JButton btn : botones){
            if(btn.getText().equals("Eliminar")){
                btn.setBackground(new Color(255,51,51));
                btn.setEnabled(true);
            } else {
                btn.setBackground(new Color(4,205,4));
                btn.setEnabled(true);
            }
        }
        
    }
    
private void limpiarCampos(JComponent[] inputs) {
    for (JComponent input : inputs) {
        if (input instanceof JTextField) {
            ((JTextField) input).setText("");
        } else if (input instanceof JComboBox) {
            ((JComboBox<?>) input).setSelectedIndex(-1); // Deselecciona todo
        }
    }
}

    
    
     private void successText(JLabel statusLabel){
         JOptionPane.showMessageDialog(null, "Accion efectuada con √©xito");
          statusLabel.setText("Aplicado con √©xito");
        statusLabel.setForeground(new Color(51, 153, 0)); // Verde
    }
    
   private boolean validateAdminCRUDInputs(JComponent[] inputs, boolean[] needed, JLabel statusLabel) {
    boolean validationStatus = true;

    int reps = 0;
    for (JComponent input : inputs) {
        if (input instanceof JTextField) {
            String text = ((JTextField) input).getText().trim();
            if (text.isEmpty() && needed[reps] == true) {
                validationStatus = false;
                break;
            }
        } else if (input instanceof JComboBox) {
            Object selectedItem = ((JComboBox<?>) input).getSelectedItem();
            if (needed[reps] == true && (selectedItem == null || selectedItem.toString().trim().isEmpty())) {
                validationStatus = false;
                break;
            }
        }
        reps += 1;
    }

    if (!validationStatus) {
        statusLabel.setText("Campos faltantes");
        statusLabel.setForeground(new Color(204, 0, 51)); // Rojo
    }

    return validationStatus;
}
   
   
         //</editor-fold>
    
       /*
      M√âTODOS UTILES
    =====================================================================
    =====================================================================
    */
   
   
   
   
   EvaluacionManager evaluacionManager = new EvaluacionManager();  
   CalificacionManager calificacionManager = new CalificacionManager();
   
   
      private void cargarModeloTablas(){
        String[] columnasEvals = {"ID de evaluacion", "ID Del curso", "ID del Profesor", "Titulo", "Fecha de Inicio", "Plazo de entrega", "Tipo"};
        Crear_Modelo(columnasEvals, tableCursoEvals);
            Crear_Modelo(columnasEvals, tableEvaluaciones);
        
           String[] columnasCalificaciones = {"ID de calificacion", "ID de evaluacion",  "ID del estudiante", "Fecha de entrega", "Nota"};
        Crear_Modelo(columnasCalificaciones, tableCalificaciones);

      }
   
     private void cargarTablasNecesarias(){
        cargarTablaEvaluaciones();
        cargarTablaCursoEvals();
        cargarTablaCalificacionesDeProfesor();
      
     
    }
    
    private void cargarTablaEvaluaciones(){
           List<Evaluacion> listaEvaluaciones = evaluacionManager.listarEvaluacion();
        
        if(listaEvaluaciones != null) {
            cargarTabla(tableEvaluaciones, listaEvaluaciones);
            counterEvaluaciones.setText(String.valueOf(listaEvaluaciones.size()));
        }
    }
    
      private void cargarTablaCursoEvals(){
           List<Evaluacion> listaEvaluaciones = evaluacionManager.listarEvaluacion();
        
        if(listaEvaluaciones != null) {
            cargarTabla(tableCursoEvals, listaEvaluaciones);
        }
    }
      
      
      private void cargarTablaCalificacionesDeProfesor(){
            List<Calificacion> listaCalificaciones = calificacionManager.listarCalificacionesPorEvaluacionDeProfesor(currentCurso.getIdCurso(), currentRole.getIdProfesor());
        
        if(listaCalificaciones != null) {
            cargarTabla(tableCalificaciones, listaCalificaciones);
        }
      }
    
        SimpleDateFormat formatoFecha = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
    
    
      public void cargarTabla(JTable tabla, List<?> lista) {
        DefaultTableModel modelo = (DefaultTableModel) tabla.getModel();
        modelo.setRowCount(0);  // Limpiar tabla

        if (lista == null || lista.isEmpty()) {
            return;
        }

        Object ejemplo = lista.get(0);
        Field[] campos = ejemplo.getClass().getDeclaredFields();

        for (Object obj : lista) {
            Object[] fila = new Object[campos.length];
            try {
              for (int i = 0; i < campos.length; i++) {
                campos[i].setAccessible(true);
                Object valor = campos[i].get(obj);

                // Si el valor es un Timestamp, lo convertimos a String sin milisegundos
                if (valor instanceof Timestamp) {
                    Timestamp timestamp = (Timestamp) valor;
                    // Convertir el Timestamp a String sin milisegundos
                    valor = formatoFecha.format(timestamp);
                }

                fila[i] = valor;
                }
                modelo.addRow(fila);
            } catch (IllegalAccessException e) {
                e.printStackTrace();
            }
        }
    }
    
      
     private void ApplyFieldsOnlyFloat() {
    JTextField[] campos = {inputCalificacionAsignarNota};

    for (JTextField campo : campos) {
        campo.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                char c = evt.getKeyChar();

                // Si el car√°cter es un n√∫mero o el punto decimal
                if (!Character.isDigit(c) && c != '.') {
                    evt.consume();  // Bloquea si NO es un n√∫mero ni un punto
                }
                
                // Verifica si el punto decimal ya est√° presente
                String text = campo.getText();
                if (c == '.' && text.contains(".")) {
                    evt.consume();  // Bloquea si ya hay un punto en el texto
                }
            }
        });
    }
}

      
      
      
      
      
        /*
    =====================================================================
    =====================================================================
     ZONA DE GESTION DE ESCUELAS (DAO1 DAOESCUELAS)
    */
    
    //<editor-fold>

    private void deleteEvaluacion(){
        
        JComponent[] inputsList = {};
              boolean[] needed = {};
               JButton[] buttonsList = {btnCalificacionAsignarNota, BtnCalificacionEliminar};
        
             boolean accion = actionDeleteEvaluacion();
        if(accion == false) return;
        
        
                    desabilitarBotones(buttonsList);
                   limpiarCampos(inputsList);
                   successText(statusTextEvaluacion);
    }
    
    
    private void updateEvaluacion(){
        
           JComponent[] inputsList = {};
              boolean[] needed = {};
               JButton[] buttonsList = {btnCalificacionAsignarNota, BtnCalificacionEliminar};
    
         boolean inputsValidados = validateAdminCRUDInputs(inputsList, needed, statusTextEvaluacion);
        if(inputsValidados == false) return;
        
        boolean accion = actionUpdateEvaluacion();
        if(accion == false) return;
                

                desabilitarBotones(buttonsList);
                   limpiarCampos(inputsList);
                   successText(statusTextEvaluacion);

    }
    
    private void createNewEvaluacion(){
        
             JComponent[] inputsList = {};
              boolean[] needed = {};
               JButton[] buttonsList = {btnCalificacionAsignarNota, BtnCalificacionEliminar};
        
        boolean inputsValidados = validateAdminCRUDInputs(inputsList, needed, statusTextEvaluacion);
        if(inputsValidados == false) return;
        
        boolean accion = actionCreateEvaluacion();
        if(accion == false) return;
        
       
           desabilitarBotones(buttonsList);
           limpiarCampos(inputsList);
           successText(statusTextEvaluacion);
        
    }
    
    
        private boolean actionCreateEvaluacion(){

    try {
        // Obtener las fechas como Strings desde los inputs
        String fechaInicioStr = inputEvaluacionFechaInicio.getText();
        String fechaFinStr = inputEvaluacionFechaFin.getText();

        // Convertir las cadenas a Timestamp (asumiendo que las fechas est√°n en el formato adecuado)
        Timestamp fechaInicioTimestamp = Timestamp.valueOf(fechaInicioStr);
        Timestamp fechaFinTimestamp = Timestamp.valueOf(fechaFinStr);

        // Crear el nuevo objeto Evaluacion con los Timestamps
        Evaluacion nuevoObjeto = new Evaluacion(
            0,
            currentCurso.getIdCurso(),
            currentRole.getIdProfesor(),
            inputEvaluacionTitulo.getText(),
            fechaInicioTimestamp,
            fechaFinTimestamp,
            inputEvaluacionTipo.getText()
        );

          boolean accion = evaluacionManager.insertarEvaluacion(nuevoObjeto, currentCurso.getIdCurso());

                if(accion == false){
                    JOptionPane.showMessageDialog(null, "Error al efectuar accion");
                    return false;
                }

                cargarTablasNecesarias();
                return true;
    } catch (IllegalArgumentException e) {
        e.printStackTrace();
        // Manejo de error si el formato de la fecha no es v√°lido
    }

        return false;
        //FIN DEL METODO
        }

    private boolean actionUpdateEvaluacion(){
           
            int fila = tableEvaluaciones.getSelectedRow();
            if (fila != -1) {
                  Object id = tableEvaluaciones.getValueAt(fila, 0);
                 
                 try {
                    // Obtener las fechas como Strings desde los inputs
                    String fechaInicioStr = inputEvaluacionFechaInicio.getText();
                    String fechaFinStr = inputEvaluacionFechaFin.getText();

                    // Convertir las cadenas a Timestamp (asumiendo que las fechas est√°n en el formato adecuado)
                    Timestamp fechaInicioTimestamp = Timestamp.valueOf(fechaInicioStr);
                    Timestamp fechaFinTimestamp = Timestamp.valueOf(fechaFinStr);

                    // Crear el nuevo objeto Evaluacion con los Timestamps
                    Evaluacion nuevoObjeto = new Evaluacion(
                        (int) id,
                        currentCurso.getIdCurso(),
                        currentRole.getIdProfesor(),
                        inputEvaluacionTitulo.getText(),
                        fechaInicioTimestamp,
                        fechaFinTimestamp,
                        inputEvaluacionTipo.getText()
                    );
                    
                     boolean accion = evaluacionManager.actualizarEvaluacion(nuevoObjeto);
                   
                    
                    if(accion == false){
                        JOptionPane.showMessageDialog(null, "Error al efectuar accion");
                        return false;
                    }      
                    
                } catch (IllegalArgumentException e) {
                    e.printStackTrace();
                    // Manejo de error si el formato de la fecha no es v√°lido
                }
                  
                  
                  
            }
            
            cargarTablasNecesarias();
            return true;
    }
    
    private boolean actionDeleteEvaluacion(){
         int fila = tableEvaluaciones.getSelectedRow();
            if (fila != -1) {
                  Object id = tableEvaluaciones.getValueAt(fila, 0);
                  
                   boolean accion = evaluacionManager.eliminarEvaluacion((int) id);
                   
                if(accion == false){
                    JOptionPane.showMessageDialog(null, "Error al efectuar accion");
                    return false;
                }       
            }
            
            cargarTablasNecesarias();
            return true;
    }
    //</editor-fold>
    
       /*
      ZONA DE GESTION DE CALIFICACIONES
    =====================================================================
    =====================================================================
    */
    
    
     private void updateCalificacionNota(){
        
        JComponent[] inputsList = {inputCalificacionAsignarNota};
              boolean[] needed = {true};
        JButton[] buttonsList = {btnCalificacionAsignarNota, BtnCalificacionEliminar};
        
        if(inputCalificacionAsignarNota.getText().isEmpty() || Float.parseFloat(inputCalificacionAsignarNota.getText()) < 0 || Float.parseFloat(inputCalificacionAsignarNota.getText()) > 5){
            statusTextCalificacion.setText("Nota inv√°lida");
            return;
        }
    
         boolean inputsValidados = validateAdminCRUDInputs(inputsList, needed, statusTextCalificacion);
        if(inputsValidados == false) return;
        
        boolean accion = actionUpdateCalificacionNota();
        if(accion == false) return;
                
                cargarTablaCalificacionesDeProfesor();
                desabilitarBotones(buttonsList);
                    inputCalificacionAsignarNota.setEnabled(false);
                   limpiarCampos(inputsList);
                   successText(statusTextCalificacion);

    }
    
     private boolean actionUpdateCalificacionNota(){
           
            int fila = tableCalificaciones.getSelectedRow();
            if (fila != -1) {
                  Object id = tableCalificaciones.getValueAt(fila, 0);
                 
                 try {
                    // Obtener las fechas como Strings desde los inputs
                    String fechaEntrega = inputCalificacionAsignarNota.getText();

                    
                     boolean accion = calificacionManager.actualizarNotaDeCalificacion((int) id, Float.parseFloat(inputCalificacionAsignarNota.getText()));
                   
                    
                    if(accion == false){
                        JOptionPane.showMessageDialog(null, "Error al efectuar accion");
                        return false;
                    }      
                    
                } catch (IllegalArgumentException e) {
                    e.printStackTrace();
                    // Manejo de error si el formato de la fecha no es v√°lido
                }
                  
                  
                  
            }
            
            cargarTablasNecesarias();
            return true;
    }
     
     
      private void deleteCalificacion(){
        
        JComponent[] inputsList = {inputCalificacionAsignarNota};
              boolean[] needed = {true};
JButton[] buttonsList = {btnCalificacionAsignarNota, BtnCalificacionEliminar};
        
        
             boolean accion = actionDeleteCalificacion();
        if(accion == false) return;
        
        
                    desabilitarBotones(buttonsList);
                         inputCalificacionAsignarNota.setEnabled(false);
                   limpiarCampos(inputsList);
                   successText(statusTextCalificacion);
    }
      
       private boolean actionDeleteCalificacion(){
         int fila = tableCalificaciones.getSelectedRow();
            if (fila != -1) {
                  Object id = tableCalificaciones.getValueAt(fila, 0);
                  
                   boolean accion = calificacionManager.eliminarCalificacion((int) id);
                   
                if(accion == false){
                    JOptionPane.showMessageDialog(null, "Error al efectuar accion");
                    return false;
                }       
            }
            
            cargarTablaCalificacionesDeProfesor();
            return true;
    }
    
    
            /*
    =====================================================================
    =====================================================================
     ZONA DE GESTION DE ESCUELAS (DAO1 DAOESCUELAS)
    */
    
    //<editor-fold>
    
    
    
        //</editor-fold>
    
       /*
      ZONA DE GESTION DE ESCUELAS
    =====================================================================
    =====================================================================
    */
      
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(DetalleCursoProfesor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(DetalleCursoProfesor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(DetalleCursoProfesor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(DetalleCursoProfesor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        /* Create and display the form */
        
    }
    
    
    
    DefaultTableModel modelo;
 private void Crear_Modelo(String[] titulos, JTable tablaDestino) {
    try {
        DefaultTableModel modelo = new DefaultTableModel(null, titulos) {

            // Tipos de datos por columna (aqu√≠ todos String, puedes modificarlo)
            Class[] types = new Class[titulos.length];
            {
                for (int i = 0; i < types.length; i++) {
                    types[i] = String.class;
                }
            }

            // Todas las celdas no editables
            boolean[] canEdit = new boolean[titulos.length];
            {
                for (int i = 0; i < canEdit.length; i++) {
                    canEdit[i] = false;
                }
            }

            @Override
            public Class<?> getColumnClass(int columnIndex) {
                return types[columnIndex];
            }

            @Override
            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit[columnIndex];
            }
        };

        tablaDestino.setModel(modelo);

    } catch (Exception e) {
        JOptionPane.showMessageDialog(null, e.toString() + " - Error al crear modelo de tabla");
    }
}

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BtnCalificacionEliminar;
    private javax.swing.JButton BtnVerDetallesEval1;
    private javax.swing.JPanel EvaluacionManager;
    private javax.swing.JPanel RightContainer;
    private javax.swing.JPanel Tab1Container;
    private javax.swing.JTabbedPane TabbedContainer;
    private javax.swing.JButton btnApplyEvaluacion;
    private javax.swing.JButton btnCalificacionAsignarNota;
    private javax.swing.JButton btnCreateEvaluacion;
    private javax.swing.JButton btnDeleteEvaluacion;
    private javax.swing.JLabel counterEvaluaciones;
    private javax.swing.JTextField inputCalificacionAsignarNota;
    private javax.swing.JTextField inputEvaluacionFechaFin;
    private javax.swing.JTextField inputEvaluacionFechaInicio;
    private javax.swing.JTextField inputEvaluacionTipo;
    private javax.swing.JTextField inputEvaluacionTitulo;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator5;
    private javax.swing.JLabel statusTextCalificacion;
    private javax.swing.JLabel statusTextEvaluacion;
    private javax.swing.JTable tableCalificaciones;
    private javax.swing.JTable tableCursoEvals;
    private javax.swing.JTable tableEvaluaciones;
    private javax.swing.JLabel welcomeMessageName;
    // End of variables declaration//GEN-END:variables
}
